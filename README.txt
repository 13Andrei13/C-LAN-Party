Am creat o clasa de playeri in care a am implementat contructorii, functii de set si de get astfel incat sa pot lucra usor cu clasa de playeri .
Dupa acest lucru m-am gandit ca, eu , am mai multe echipe in care am playeri, astfel am creat o clasa de echipe unde desigur ca am numarul de pleyeri, Pleyeri si pointer de tip next care o sa ma ajute mai incolo. Tot in clasa asta am facut functii de get, de set, constructori si tot ce am avut nevoie pentru a lucra usor cu aceasta clasa. Functia getPoe returneaza punctajul echipei. Aceasta functie primeste ca parametrii Playerii si numarul de playeri. Functia de setPoe primeste aceasi parametrii ca getPoe numai ca aceata seteaza punctajul echipei cu +1, punand la fiecare player cate un punct in plus.
Dupa aceast lucru, m-am gandit  ca eu trebuie sa realizez o lista in care am mai multe echipe, astfel incat am creat o clasa ListaEchipe in care am bagat toate echipele. In aceasta clasa regasim constructori, functii de set si de get, functia de delete_position care primeste ca parametru pozitia termenului pe care vreau sa o sterg, add_position care adauga un element la o pozitie pe care o primeste ca parametru, adaugand Echipa pe care tot eu o dau ca parametru.Functia de getMin parcurge toata lista gasind un minim, dupa acesta il elimina.  Constructorul primeste un parametru un fisier pentru a stoca direct din fisier. In lista o sa fie adaugati termeni mereu in cap pentru a fi stocata lista direct corect.
Dupa acest lucru m am gandit ca ca aceasta lista trebuie sa fie filtrata si adusa la o forma prielnica pentru a crea meciurile. Astfel am facut o clasa de meciuri pentru a-mi crea meciurile. In meciuri regasim doua echipe, echipa a si echipa b. Am realizat constructori care creza meciuri din lista primind capul listei de tip Echipa. Desigur in meciuri regasim functii de set si de get care imi usureza munca cu aceasta clasa. Functia de pushmeci si popMeci nu sunt folosite.
Dupa acest lucru am creat o clasa Stiva deoarece castigatorii si invingatorii trebuie stocate intr o stiva. Astfel am creat o stiva unde regasim Echipa* e, capul stivei. Am creat constructori, cel mai util fiind construcotrul care primeste ca parametru Meciurile, astfel eu imi creez stiva dupa castigatorul unui meci. Acest castigator este adaugat din nou in cap astfel incat sa mi creez stiva bine . Variabila type imi arata mie daca imi creez lista de invingatori sau de pierzatori.
Functia add_position adauga in stiva Echipa pe pozitia pe care tot eu, i-o dau ca parametru.
Pentru punctul 4 am implementat un arbore binar, clasa BST. In BST regasim functii de insert, destroy si functia de inOrder, care insereaza in arbore descrescator. In functia inOrder regasim if uri astfel incat sa verific unde pun termenul, ori dupa punctaj, ori dupa nume. 
Intr-un final in main am verificat ce vrea checker ul sa realizeze, astfel pentru primul exercitiu am citit lista si am afist-o. Pentru al doilea exercitiu am gasit numarul de exchipe pe care ar trebui sa il am si am aplicat functia de cate ori a fost nevoie. La exercitiul 3 am creat primul set de meciuri din lista si le-am si afisat, dupa mi am creat invingatorii din meciuri cu constructorul de stiva . Desigur am retinur si cati termeni mai am astfel incat la 16 termeni, castigatorii i am bagat si in arborele binar.
La ex 4 am afisat arborele binar in cazul in care se cere.